{"version":3,"file":"static/js/944.2d7a051c.chunk.js","mappings":"+TAmBaA,EAAW,WAEpB,IAAMC,GAAWC,EAAAA,EAAAA,KACXC,GAASC,EAAAA,EAAAA,KAAmC,SAAAC,GAAK,OAAIA,EAAMC,KAAKH,UAGtE,GAAuEI,EAAAA,EAAAA,IAAsB,CACzFC,KAAM,WACNC,cAAe,CACXC,YAAY,EACZC,SAAU,GACVC,MAAO,MALRC,EAAP,EAAOA,SAAsBC,EAA7B,EAAiBC,UAAYD,OAASE,EAAtC,EAAsCA,aAAcC,EAApD,EAAoDA,MAAQC,EAA5D,EAA4DA,QAgB5D,OAAIf,GACO,SAAC,KAAD,CAAUgB,GAAI,cAIrB,SAAC,KAAD,CAAMC,WAAS,EAACC,eAAe,SAA/B,UACI,SAAC,KAAD,CAAMC,MAAI,EAACC,GAAI,EAAf,UACI,iBAAMC,SAAUR,GAbS,SAAAS,GACjCxB,GAASW,EAAAA,EAAAA,IAAMa,EAAKb,MAAOa,EAAKd,SAAUc,EAAKf,aAC/CO,OAWQ,UACI,UAAC,IAAD,YACI,UAAC,IAAD,YACI,sDACA,8CAEJ,UAAC,IAAD,YACI,SAAC,KAAD,kBACQJ,EAAS,QAAS,CAACa,SAAU,cADrC,IAEIC,OAAO,aAEX,0BACW,OAANb,QAAM,IAANA,OAAA,EAAAA,EAAQF,SAAS,wBAAU,OAANE,QAAM,IAANA,OAAA,EAAAA,EAAQF,MAAMgB,UAAW,kBAEnD,SAAC,KAAD,QACIC,KAAM,WACNF,OAAO,UACHd,EAAS,WAAY,CACrBa,SAAU,WACVI,UAAW,CACPC,MAAO,EACPH,QAAS,yBAIrB,0BACW,OAANd,QAAM,IAANA,OAAA,EAAAA,EAAQH,YAAY,wBAAU,OAANG,QAAM,IAANA,OAAA,EAAAA,EAAQH,SAASiB,UAAW,kBAG1D,SAAC,IAAD,CACKI,MAAO,cACPd,SAAU,SAAC,KAAD,CACNA,QAASA,EACTe,KAAM,aACNC,OAAQ,oBAAEC,MAAQC,EAAV,EAAUA,SAAUL,EAApB,EAAoBA,MAApB,OACJ,SAAC,IAAD,CACIK,SAAUA,EACVC,QAASN,UAMzB,SAAC,IAAD,CAAQF,KAAM,SAAUS,QAAS,YAAaC,MAAO,UAArD","sources":["components/Login/Login.tsx"],"sourcesContent":["import Button from \"@mui/material/Button\";\r\nimport Checkbox from \"@mui/material/Checkbox\";\r\nimport FormControl from \"@mui/material/FormControl\";\r\nimport FormControlLabel from \"@mui/material/FormControlLabel\";\r\nimport FormGroup from \"@mui/material/FormGroup\";\r\nimport FormLabel from \"@mui/material/FormLabel\";\r\nimport Grid from \"@mui/material/Grid\";\r\nimport TextField from \"@mui/material/TextField\";\r\nimport React from \"react\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {login, logOut} from \"../../redux/auth-reducer\";\r\nimport {AppStateType, useAppDispatch} from \"../../redux/redux-store\";\r\nimport {SubmitHandler, useForm, Controller} from \"react-hook-form\";\r\n\r\nexport type FormDataType = {\r\n    login: string, password: string, rememberMe: boolean\r\n};\r\n\r\nexport const Logintwo = () => {\r\n\r\n    const dispatch = useAppDispatch()\r\n    const isAuth = useSelector<AppStateType, boolean>(state => state.auth.isAuth)\r\n\r\n\r\n    const {register, formState: {errors}, handleSubmit, reset,  control} = useForm<FormDataType>({\r\n        mode: 'onChange',\r\n        defaultValues: {\r\n            rememberMe: false,\r\n            password: '',\r\n            login: ''\r\n        }\r\n    })\r\n\r\n\r\n    const onSubmit: SubmitHandler<any> = data => {\r\n        dispatch(login(data.login, data.password, data.rememberMe))\r\n        reset()\r\n    }\r\n\r\n\r\n    if (isAuth) {\r\n        return <Redirect to={\"/profile\"}/>;\r\n    }\r\n\r\n    return (\r\n        <Grid container justifyContent=\"center\">\r\n            <Grid item xs={4}>\r\n                <form onSubmit={handleSubmit(onSubmit)}>\r\n                    <FormControl>\r\n                        <FormLabel>\r\n                            <p>Email: free@samuraijs.com</p>\r\n                            <p>Password: free</p>\r\n                        </FormLabel>\r\n                        <FormGroup>\r\n                            <TextField\r\n                                {...register('login', {required: 'Required'})}\r\n                                margin=\"normal\"\r\n                            />\r\n                            <div>\r\n                                {errors?.login && <p>{errors?.login.message || \"some error\"}</p>}\r\n                            </div>\r\n                            <TextField\r\n                                type={'password'}\r\n                                margin=\"normal\"\r\n                                {...register('password', {\r\n                                    required: 'Required',\r\n                                    minLength: {\r\n                                        value: 4,\r\n                                        message: 'Min four symbols'\r\n                                    }\r\n                                })}\r\n                            />\r\n                            <div>\r\n                                {errors?.password && <p>{errors?.password.message || \"some error\"}</p>}\r\n                            </div>\r\n\r\n                           <FormControlLabel\r\n                                label={'Remember me'}\r\n                                control={ <Controller\r\n                                    control={control}\r\n                                    name={'rememberMe'}\r\n                                    render={({field: {onChange, value}}) => (\r\n                                        <Checkbox\r\n                                            onChange={onChange}\r\n                                            checked={value}\r\n\r\n                                        />\r\n                                    )}\r\n                                />}\r\n                            />\r\n                            <Button type={'submit'} variant={'contained'} color={'primary'}>Login</Button>\r\n                        </FormGroup>\r\n                    </FormControl>\r\n                </form>\r\n            </Grid>\r\n\r\n        </Grid>\r\n    )\r\n}\r\n\r\n\r\n"],"names":["Logintwo","dispatch","useAppDispatch","isAuth","useSelector","state","auth","useForm","mode","defaultValues","rememberMe","password","login","register","errors","formState","handleSubmit","reset","control","to","container","justifyContent","item","xs","onSubmit","data","required","margin","message","type","minLength","value","label","name","render","field","onChange","checked","variant","color"],"sourceRoot":""}