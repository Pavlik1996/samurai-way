{"version":3,"file":"static/js/250.05a4e116.chunk.js","mappings":"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","sources":["webpack://samurai-way/./src/components/Profile/Profileinfo/ProfileInfo.module.css?faff","components/Profile/Profileinfo/ProfileStatusWitchHooc.tsx","components/Profile/Profileinfo/Profileinfo.tsx","webpack://samurai-way/./src/components/Profile/MyPosts/Post/Post.module.css?87e6","components/Profile/MyPosts/Post/Post.tsx","webpack://samurai-way/./src/components/Profile/MyPosts/MyPosts.module.css?831b","../node_modules/redux-form/es/Form.js","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx","webpack://samurai-way/./src/components/common/FormsControls/FormsControls.module.css?eb50","components/common/FormsControls/FormsControls.tsx","utils/validators/validators.ts"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__jCOWP\",\"imgTop\":\"ProfileInfo_imgTop__IfZ3m\"};","import React, { ChangeEvent, useEffect, useState } from \"react\";\r\n\r\ntype ProfileStatusType = {\r\n    status: string;\r\n    updateStatus: (status: string) => void;\r\n};\r\n\r\n\r\nexport const ProfileStatusWitchHooc = (props: ProfileStatusType) => {\r\n\r\n    const [editMode, setEditMode] = useState(false)\r\n    const [status, setTatus] = useState(props.status)\r\n\r\n    useEffect(() => {\r\n        setTatus(props.status)\r\n    }, [props.status])\r\n\r\n\r\n    const editModeHandler = () => {\r\n        setEditMode(!editMode)\r\n        props.updateStatus(status)\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTatus(e.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {editMode\r\n                ? <div>\r\n                    <input\r\n                        onChange={onChangeHandler}\r\n                        value={status}\r\n                        autoFocus\r\n                        onBlur={editModeHandler}\r\n                    />\r\n                </div>\r\n                : <div>\r\n                    <span onDoubleClick={editModeHandler}>\r\n                        {props.status || \"No status\"}\r\n                    </span>\r\n                </div>\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\n","import React from \"react\";\r\nimport s from \"./ProfileInfo.module.css\";\r\nimport { ProfileInfoType } from \"../../../redux/store\";\r\nimport { ProfileStatusWitchHooc } from \"./ProfileStatusWitchHooc\";\r\n\r\ntype ProfileType = {\r\n  profile: ProfileInfoType;\r\n  status: string;\r\n  updateStatus: (status: string) => void;\r\n};\r\n\r\nconst ProfileInfo: React.FC<ProfileType> = ({profile, status, updateStatus}) => {\r\n  return (\r\n    <div>\r\n      <div className={s.descriptionBlock}>\r\n        <img alt={\"ava\"} src={profile.photos.large} />\r\n        <ProfileStatusWitchHooc\r\n          status={status}\r\n          updateStatus={updateStatus}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ProfileInfo;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Post_item__+61kU\"};","import React from \"react\";\r\nimport classes from \"./Post.module.css\"\r\n\r\ntype MessageType = {\r\n    message: string\r\n    likeCount: number\r\n}\r\n\r\nconst Post = (props:MessageType) => {\r\n    return (\r\n        <div className={classes.item}>\r\n            <img src=\"https://klike.net/uploads/posts/2019-03/1551511801_1.jpg\"\r\n            alt=\"ava\"/>\r\n            {props.message}\r\n            <div>\r\n                <span> {props.likeCount}Like</span>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default Post\r\n","// extracted by mini-css-extract-plugin\nexport default {\"pastBlock\":\"MyPosts_pastBlock__syf2B\",\"posts\":\"MyPosts_posts__x33vE\"};","import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/objectWithoutPropertiesLoose\";\nimport _inheritsLoose from \"@babel/runtime/helpers/inheritsLoose\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { withReduxForm } from './ReduxFormContext';\n\nvar Form = /*#__PURE__*/function (_Component) {\n  _inheritsLoose(Form, _Component);\n\n  function Form(props) {\n    var _this;\n\n    _this = _Component.call(this, props) || this;\n\n    if (!props._reduxForm) {\n      throw new Error('Form must be inside a component decorated with reduxForm()');\n    }\n\n    return _this;\n  }\n\n  var _proto = Form.prototype;\n\n  _proto.componentDidMount = function componentDidMount() {\n    this.props._reduxForm.registerInnerOnSubmit(this.props.onSubmit);\n  };\n\n  _proto.componentDidUpdate = function componentDidUpdate(prevProps) {\n    if (this.props.onSubmit !== prevProps.onSubmit) {\n      this.props._reduxForm.registerInnerOnSubmit(this.props.onSubmit);\n    }\n  };\n\n  _proto.render = function render() {\n    var _this$props = this.props,\n        _reduxForm = _this$props._reduxForm,\n        rest = _objectWithoutPropertiesLoose(_this$props, [\"_reduxForm\"]);\n\n    return /*#__PURE__*/React.createElement(\"form\", rest);\n  };\n\n  return Form;\n}(Component);\n\nForm.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n  _reduxForm: PropTypes.object\n};\nexport default withReduxForm(Form);","import React from \"react\";\r\nimport Post from \"./Post/Post\";\r\nimport s from \"./MyPosts.module.css\";\r\nimport { PostsType } from \"../../../redux/store\";\r\nimport { Field, Form, InjectedFormProps, reduxForm } from \"redux-form\";\r\nimport {\r\n  maxLengthCreator,\r\n  required,\r\n} from \"../../../utils/validators/validators\";\r\nimport { Textarea } from \"../../common/FormsControls/FormsControls\";\r\n\r\ntype MyPostsType = {\r\n  posts: PostsType[];\r\n  newPostText: string;\r\n  addPost: (value: string) => void;\r\n};\r\n\r\ntype valueType = {\r\n  handleSubmit: (values: string) => void;\r\n  myPostMessage: string;\r\n};\r\n\r\nconst maxLength10 = maxLengthCreator(10);\r\n\r\nconst AddNewPostForm: React.FC<InjectedFormProps<valueType>> = ({handleSubmit}) => {\r\n  return (\r\n    <Form onSubmit={handleSubmit}>\r\n      <Field\r\n        component={Textarea}\r\n        name={\"myPostMessage\"}\r\n        placeholder={\"post message\"}\r\n        validate={[required, maxLength10]}\r\n      />\r\n      <div>\r\n        <button>Send post</button>\r\n      </div>\r\n    </Form>\r\n  );\r\n};\r\n\r\nconst AddNewPostFormRedux = reduxForm<valueType>({form: \"MyPostFormRedux\"})(AddNewPostForm);\r\n\r\nexport const MyPosts = React.memo((props: MyPostsType) => {\r\n\r\n  const postsElements = [...props.posts]\r\n    .reverse()\r\n    .map(p => <Post key={p.id} message={p.messages} likeCount={p.like} />)\r\n\r\n  const onAddPost = (value: valueType) => {\r\n    props.addPost(value.myPostMessage);\r\n  };\r\n\r\n  return (\r\n    <div className={s.pastBlock}>\r\n      <div>\r\n        <h3>My post</h3>\r\n        <AddNewPostFormRedux onSubmit={onAddPost} />\r\n      </div>\r\n      <div className={s.posts}>{postsElements}</div>\r\n    </div>\r\n  );\r\n});\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { AppStateType } from \"../../../redux/redux-store\";\r\nimport { PostsType } from \"../../../redux/store\";\r\nimport { ActionsTypeProfile, addPostAC } from \"../../../redux/profile-reducer\";\r\nimport { MyPosts } from \"./MyPosts\";\r\n\r\ntype mapStateToPropsType = {\r\n  posts: PostsType[];\r\n  newPostText: string;\r\n};\r\n\r\ntype mapDispatchToProps = {\r\n  addPost: (myPostMessage: string) => void;\r\n};\r\n\r\nlet mapStateToProps = (state: AppStateType): mapStateToPropsType => {\r\n  return {\r\n    posts: state.profilePage.posts,\r\n    newPostText: state.profilePage.newPostText,\r\n  };\r\n};\r\n\r\nlet mapDispatchToProps = (\r\n  dispatch: (action: ActionsTypeProfile) => void\r\n): mapDispatchToProps => {\r\n  return {\r\n    addPost: (myPostMessage: string) => {\r\n      dispatch(addPostAC(myPostMessage));\r\n    },\r\n  };\r\n};\r\n\r\nexport const MyPostContainer = connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(MyPosts);\r\n","import React from \"react\";\r\nimport ProfileInfo from \"./Profileinfo/Profileinfo\";\r\nimport { MyPostContainer } from \"./MyPosts/MyPostsContainer\";\r\nimport { ProfileInfoType } from \"../../redux/store\";\r\n\r\ntype ProfileType = {\r\n  profile: ProfileInfoType;\r\n  status: string;\r\n  updateStatus: (status: string) => void;\r\n};\r\n\r\nconst Profile = (props: ProfileType) => {\r\n  return (\r\n    <div>\r\n      <ProfileInfo\r\n        profile={props.profile}\r\n        status={props.status}\r\n        updateStatus={props.updateStatus}\r\n      />\r\n      <MyPostContainer />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Profile;\r\n","import React, { FC } from \"react\";\r\nimport Profile from \"./Profile\";\r\nimport { ProfileInfoType } from \"../../redux/store\";\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n  getStatus,\r\n  getUserProfile,\r\n  updateStatus,\r\n} from \"../../redux/profile-reducer\";\r\nimport { AppStateType } from \"../../redux/redux-store\";\r\nimport { RouteChildrenProps, withRouter } from \"react-router-dom\";\r\nimport { compose } from \"redux\";\r\n\r\ntype PathParamsType = {\r\n  userId: string;\r\n};\r\n\r\ntype PropsType = RouteChildrenProps<PathParamsType> & OwnPropsType;\r\n\r\ntype MapStatePropsType = {\r\n  profile: ProfileInfoType;\r\n  status: string;\r\n  authrorizedUserId: any;\r\n  isAuth: boolean;\r\n};\r\n\r\ntype MapDispatchPropsType = {\r\n  getUserProfile: (userId: any) => void;\r\n  getStatus: (userId: any) => void;\r\n  updateStatus: (status: string) => void;\r\n};\r\n\r\ntype OwnPropsType = MapStatePropsType & MapDispatchPropsType;\r\n\r\nclass ProfileContainer extends React.Component<PropsType> {\r\n  componentDidMount() {\r\n    let userId = this.props.match?.params.userId;\r\n\r\n    if (!userId) {\r\n      userId = this.props.authrorizedUserId;\r\n      if (!userId) {\r\n        this.props.history.push('/login')\r\n      }\r\n    }\r\n    this.props.getUserProfile(userId);\r\n    this.props.getStatus(userId);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Profile\r\n          profile={this.props.profile}\r\n          status={this.props.status}\r\n          updateStatus={this.props.updateStatus}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nlet mapSTateToProps = (state: AppStateType): MapStatePropsType => {\r\n  return {\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    authrorizedUserId: state.auth.data.id,\r\n    isAuth: state.auth.isAuth,\r\n  };\r\n};\r\n\r\nexport const ProfileComponent = compose<FC>(\r\n  connect(mapSTateToProps, { getUserProfile, getStatus, updateStatus }),\r\n  withRouter\r\n)(ProfileContainer);\r\n","// extracted by mini-css-extract-plugin\nexport default {\"formControl\":\"FormsControls_formControl__dRTkr\",\"error\":\"FormsControls_error__1uhSa\",\"formSummaryError\":\"FormsControls_formSummaryError__GeLC8\"};","import { Field } from \"redux-form\";\r\nimport s from \"./FormsControls.module.css\";\r\n\r\nconst FromControl = ({  meta: { touched, error }, children}: any) => {\r\n  const hasError = touched && error;\r\n  return (\r\n    <div className={s.formControl + \" \" + (hasError ? s.error : \"\")}>\r\n      <div>{children}</div>\r\n      {hasError && <span>{error}</span>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport const Textarea = (props: any) => {\r\n  const { input, meta, child, ...restProps } = props;\r\n  return (\r\n    <FromControl {...props}>\r\n      <textarea {...input} {...restProps} />\r\n    </FromControl>\r\n  );\r\n};\r\n\r\nexport const Input = (props: any) => {\r\n  const { input, meta, child, ...restProps } = props;\r\n  return (\r\n    <FromControl {...props}>\r\n      <input {...input} {...restProps} />\r\n    </FromControl>\r\n  );\r\n};\r\n\r\n\r\nexport const createFiled = (\r\n  placeholder: string | null,\r\n  name: string,\r\n  component: (props: any) => JSX.Element,\r\n  validate: (value: string) => \"Filed is requared\" | undefined,\r\n  props?: any\r\n) => (\r\n  <div>\r\n    <Field placeholder={placeholder} name={name} component={component} validate={[validate]} {...props} />\r\n  </div>\r\n)","export const required = (value: string) => {\r\n  if (value) {\r\n    return undefined;\r\n  } else return \"Filed is requared\";\r\n};\r\n\r\nexport const maxLengthCreator = (maxLength: number) => (value: string) => {\r\n  if (value.length > maxLength) return `max length is ${maxLength} symbols`;\r\n  return undefined;\r\n};\r\n"],"names":["ProfileStatusWitchHooc","props","useState","editMode","setEditMode","status","setTatus","useEffect","editModeHandler","updateStatus","onChange","e","currentTarget","value","autoFocus","onBlur","onDoubleClick","profile","className","s","alt","src","photos","large","classes","message","likeCount","Form","_Component","_this","call","this","_reduxForm","Error","_inheritsLoose","_proto","prototype","componentDidMount","registerInnerOnSubmit","onSubmit","componentDidUpdate","prevProps","render","_this$props","rest","_objectWithoutPropertiesLoose","React","Component","propTypes","PropTypes","withReduxForm","maxLength10","maxLengthCreator","AddNewPostFormRedux","reduxForm","form","handleSubmit","Field","component","Textarea","name","placeholder","validate","required","MyPosts","postsElements","posts","reverse","map","p","messages","like","id","addPost","myPostMessage","MyPostContainer","connect","state","profilePage","newPostText","dispatch","addPostAC","ProfileContainer","userId","match","params","authrorizedUserId","history","push","getUserProfile","getStatus","ProfileComponent","compose","auth","data","isAuth","withRouter","FromControl","meta","touched","error","children","hasError","input","restProps","child","maxLength","length"],"sourceRoot":""}