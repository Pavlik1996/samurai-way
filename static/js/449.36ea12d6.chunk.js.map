{"version":3,"file":"static/js/449.36ea12d6.chunk.js","mappings":"qKACA,MAA0B,yBAA1B,EAAkE,8BAAlE,EAAyG,wBAAzG,EAA0I,wBAA1I,EAAgN,0B,SCGnMA,EAAU,SAACC,GACpB,OAAO,gBAAKC,UAAWC,EAAhB,SAA2BF,EAAMG,W,UCA/BC,EAAa,SAACJ,GAEvB,IAAIK,EAAO,YAAcL,EAAMM,GAE/B,OACI,gBAAKL,UAAWC,EAAW,IAAMA,EAAjC,UACI,SAAC,KAAD,CAASK,GAAIF,EAAb,SAAoBL,EAAMQ,U,iDCAhCC,GAAcC,EAAAA,EAAAA,GAAiB,IAkBrC,GAAeC,EAAAA,EAAAA,GAAqB,CAClCC,KAAM,wBADR,EAhB+D,SAACZ,GAC9D,OACE,kBAAMa,SAAUb,EAAMc,aAAtB,WACE,SAACC,EAAA,EAAD,CACEC,UAAWC,EAAAA,GACXT,KAAM,iBACNU,YAAa,qBACbC,SAAU,CAACC,EAAAA,EAAUX,MAEvB,0BACE,6C,8BCIKY,GAAmBC,E,QAAAA,KAC9BC,EAAAA,EAAAA,KAfoB,SAACC,GACrB,MAAO,CACLC,YAAaD,EAAMC,gBAIE,SAACC,GACxB,MAAO,CACLC,YAAa,SAACC,GACZF,GAASG,EAAAA,EAAAA,GAAcD,SAO3BE,EAAAA,EAF8BR,ECXT,SAACtB,GACtB,IAAIwB,EAAQxB,EAAMyB,YAEdM,EAAkBP,EAAMQ,QAAQC,KAAI,SAACC,GAAD,OACtC,SAAC9B,EAAD,CAAuBI,KAAM0B,EAAE1B,KAAMF,GAAI4B,EAAE5B,IAA1B4B,EAAE5B,OAEjB6B,EAAmBX,EAAMY,SAASH,KAAI,SAACI,GAAD,OACxC,SAACtC,EAAD,CAAoBI,QAASkC,EAAElC,QAASG,GAAI+B,EAAE/B,IAAhC+B,EAAE/B,OAOlB,OACE,iBAAKL,UAAWC,EAAhB,WACE,gBAAKD,UAAWC,EAAhB,SAAiC6B,KACjC,iBAAK9B,UAAWC,EAAhB,WACE,yBAAMiC,KACN,0BACE,SAAC,EAAD,CAAgBtB,SAVF,SAACyB,GACrBtC,EAAM2B,YAAYW,EAAMV,+B,8EC1B5B,EAA8B,mCAA9B,EAAyE,6B,oCCEnEW,EAAc,SAAC,GAAiD,IAAD,IAA7CC,KAAQC,EAAqC,EAArCA,QAASC,EAA4B,EAA5BA,MAASC,EAAmB,EAAnBA,SAC1CC,EAAWH,GAAWC,EAC5B,OACE,iBAAKzC,UAAWC,EAAgB,KAAO0C,EAAW1C,EAAU,IAA5D,WACE,yBAAMyC,IACLC,IAAY,0BAAOF,QAKbzB,EAAW,SAACjB,GACvB,IAAQ6C,EAAqC7C,EAArC6C,MAAuBC,GAAc9C,EAA9BwC,KAA8BxC,EAAxB+C,OAArB,OAA6C/C,EAA7C,IACA,OACE,SAACuC,GAAD,kBAAiBvC,GAAjB,cACE,uCAAc6C,GAAWC,S,iGCR3BE,EAA6B,SAACxB,GAChC,MAAO,CACLyB,OAAQzB,EAAM0B,KAAKD,SAcvB,IAVA,SAA2BE,GAOzB,OAAO5B,EAAAA,EAAAA,IAAQyB,EAARzB,EANP,SAA2BvB,GACQA,EAAzBiD,OAAR,IAAmBH,GAAnB,OAAiC9C,EAAjC,GACA,OAAKA,EAAMiD,QACJ,SAACE,GAAD,UAAeL,KADI,SAAC,KAAD,CAAUvC,GAAI,gB,4EClBrC,IAAMa,EAAW,SAACkB,GACvB,OAAIA,OACF,EACY,qBAGH5B,EAAmB,SAAC0C,GAAD,OAAuB,SAACd,GACtD,GAAIA,EAAMe,OAASD,EAAW,MAAM,iBAAN,OAAwBA,EAAxB","sources":["webpack://samurai-way/./src/components/Dialogs/Dialogs.module.css?1b2e","components/Dialogs/Message/Message.tsx","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/AddMessageForm/AddMessageForm.tsx","components/Dialogs/DialogsContainer.tsx","components/Dialogs/Dialogs.tsx","webpack://samurai-way/./src/components/common/FormsControls/FormsControls.module.css?eb50","components/common/FormsControls/FormsControls.tsx","hoc/witchAuthRedirect.tsx","utils/validators/validators.ts"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__xBR3G\",\"dialogsItems\":\"Dialogs_dialogsItems__RHImn\",\"active\":\"Dialogs_active__Q2UYX\",\"dialog\":\"Dialogs_dialog__MwPpQ\",\"message\":\"Dialogs_message__IKzY7\",\"messages\":\"Dialogs_messages__XBIB+\"};","import s from \"./../Dialogs.module.css\"\r\nimport {MessagesType} from \"../../../redux/store\";\r\n\r\n\r\nexport const Message = (props: MessagesType) => {\r\n    return <div className={s.dialog}>{props.message}</div>\r\n}\r\n\r\n","import s from \"./../Dialogs.module.css\"\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {DialogsType} from \"../../../redux/store\";\r\n\r\n\r\nexport const DialogItem = (props: DialogsType) => {\r\n\r\n    let path = \"/dialogs/\" + props.id\r\n\r\n    return (\r\n        <div className={s.dialog + \" \" + s.active}>\r\n            <NavLink to={path}>{props.name}</NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n","import { Field, InjectedFormProps, reduxForm } from \"redux-form\";\r\nimport {\r\n  maxLengthCreator,\r\n  required,\r\n} from \"../../../utils/validators/validators\";\r\nimport { Textarea } from \"../../common/FormsControls/FormsControls\";\r\n\r\ntype valueType = {\r\n  newMessageBody: string;\r\n};\r\n\r\nconst maxLength50 = maxLengthCreator(50);\r\n\r\nconst AddMessageForm: React.FC<InjectedFormProps<valueType>> = (props) => {\r\n  return (\r\n    <form onSubmit={props.handleSubmit}>\r\n      <Field\r\n        component={Textarea}\r\n        name={\"newMessageBody\"}\r\n        placeholder={\"enter tour message\"}\r\n        validate={[required, maxLength50]}\r\n      />\r\n      <div>\r\n        <button>Send</button>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default reduxForm<valueType>({\r\n  form: \"DialogAddMessageForm\",\r\n})(AddMessageForm);\r\n","import React, { FC } from \"react\";\r\nimport { Dialogs } from \"./Dialogs\";\r\nimport { connect } from \"react-redux\";\r\nimport { AppStateType } from \"../../redux/redux-store\";\r\nimport { ActionsTypeDialogs, sendMessageAC } from \"../../redux/dialogs-reducer\";\r\nimport witchAuthRedirect from \"../../hoc/witchAuthRedirect\";\r\nimport { compose } from \"redux\";\r\nimport { MessagesPageType } from \"../../redux/store\";\r\n\r\ntype mapStateToPropsType = {\r\n  dialogsPage: MessagesPageType;\r\n};\r\n\r\nlet mapStateToProps = (state: AppStateType): mapStateToPropsType => {\r\n  return {\r\n    dialogsPage: state.dialogsPage,\r\n  };\r\n};\r\n\r\nlet mapDispatchToProps = (dispatch: (action: ActionsTypeDialogs) => void) => {\r\n  return {\r\n    sendMessage: (newMessageBody: string) => {\r\n      dispatch(sendMessageAC(newMessageBody));\r\n    },\r\n  };\r\n};\r\n\r\nexport const DialogsComponent = compose<FC>(\r\n  connect(mapStateToProps, mapDispatchToProps),\r\n  witchAuthRedirect\r\n)(Dialogs);\r\n","import s from \"./Dialogs.module.css\";\r\nimport { Message } from \"./Message/Message\";\r\nimport { DialogItem } from \"./DialogItem/DialogItem\";\r\nimport React from \"react\";\r\nimport { MessagesPageType } from \"../../redux/store\";\r\nimport AddMessageForm from \"./AddMessageForm/AddMessageForm\";\r\n\r\ntype valueType = {\r\n  newMessageBody: string;\r\n};\r\n\r\nexport type DialogsPropsType = {\r\n  sendMessage: (value: string) => void;\r\n  dialogsPage: MessagesPageType;\r\n};\r\n\r\nexport const Dialogs = (props: DialogsPropsType) => {\r\n  let state = props.dialogsPage;\r\n\r\n  let dialogsElements = state.dialogs.map((d) => (\r\n    <DialogItem key={d.id} name={d.name} id={d.id} />\r\n  ));\r\n  let messagesElements = state.messages.map((m) => (\r\n    <Message key={m.id} message={m.message} id={m.id} />\r\n  ));\r\n\r\n  const addNewMessage = (value: valueType) => {\r\n    props.sendMessage(value.newMessageBody);\r\n  };\r\n\r\n  return (\r\n    <div className={s.dialogs}>\r\n      <div className={s.dialogsItems}>{dialogsElements}</div>\r\n      <div className={s.messages}>\r\n        <div>{messagesElements}</div>\r\n        <div>\r\n          <AddMessageForm onSubmit={addNewMessage} />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","// extracted by mini-css-extract-plugin\nexport default {\"formControl\":\"FormsControls_formControl__+L4v0\",\"error\":\"FormsControls_error__NKxmY\",\"formSummaryError\":\"FormsControls_formSummaryError__DnEyY\"};","import { Field } from \"redux-form\";\r\nimport s from \"./FormsControls.module.css\";\r\n\r\nconst FromControl = ({  meta: { touched, error }, children}: any) => {\r\n  const hasError = touched && error;\r\n  return (\r\n    <div className={s.formControl + \" \" + (hasError ? s.error : \"\")}>\r\n      <div>{children}</div>\r\n      {hasError && <span>{error}</span>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport const Textarea = (props: any) => {\r\n  const { input, meta, child, ...restProps } = props;\r\n  return (\r\n    <FromControl {...props}>\r\n      <textarea {...input} {...restProps} />\r\n    </FromControl>\r\n  );\r\n};\r\n\r\nexport const Input = (props: any) => {\r\n  const { input, meta, child, ...restProps } = props;\r\n  return (\r\n    <FromControl {...props}>\r\n      <input {...input} {...restProps} />\r\n    </FromControl>\r\n  );\r\n};\r\n\r\n\r\nexport const createFiled = (\r\n  placeholder: string | null,\r\n  name: string,\r\n  component: (props: any) => JSX.Element,\r\n  validate: (value: string) => \"Filed is requared\" | undefined,\r\n  props?: any\r\n) => (\r\n  <div>\r\n    <Field placeholder={placeholder} name={name} component={component} validate={[validate]} {...props} />\r\n  </div>\r\n)","import React, { ComponentType } from \"react\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport { AppStateType } from \"../redux/redux-store\";\r\nimport { connect } from \"react-redux\";\r\n\r\ntype RedirectComponentType = {\r\n  isAuth: boolean;\r\n};\r\n\r\nlet mapSTateToPropsForRedirect = (state: AppStateType) => {\r\n  return {\r\n    isAuth: state.auth.isAuth,\r\n  };\r\n};\r\n\r\nfunction WitchAuthRedirect(Component: ComponentType<any>) {\r\n  function RedirectComponent(props: RedirectComponentType) {\r\n    const { isAuth, ...restProps } = props;\r\n    if (!props.isAuth) return <Redirect to={\"/login\"} />;\r\n    return <Component {...restProps} />;\r\n  }\r\n\r\n  return connect(mapSTateToPropsForRedirect)(RedirectComponent);\r\n}\r\n\r\nexport default WitchAuthRedirect;\r\n\r\n","export const required = (value: string) => {\r\n  if (value) {\r\n    return undefined;\r\n  } else return \"Filed is requared\";\r\n};\r\n\r\nexport const maxLengthCreator = (maxLength: number) => (value: string) => {\r\n  if (value.length > maxLength) return `max length is ${maxLength} symbols`;\r\n  return undefined;\r\n};\r\n"],"names":["Message","props","className","s","message","DialogItem","path","id","to","name","maxLength50","maxLengthCreator","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","placeholder","validate","required","DialogsComponent","compose","connect","state","dialogsPage","dispatch","sendMessage","newMessageBody","sendMessageAC","witchAuthRedirect","dialogsElements","dialogs","map","d","messagesElements","messages","m","value","FromControl","meta","touched","error","children","hasError","input","restProps","child","mapSTateToPropsForRedirect","isAuth","auth","Component","maxLength","length"],"sourceRoot":""}